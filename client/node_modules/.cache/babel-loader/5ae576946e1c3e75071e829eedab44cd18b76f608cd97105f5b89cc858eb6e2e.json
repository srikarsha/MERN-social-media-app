{"ast":null,"code":"import * as api from \"../api/userAPI\";\nimport * as types from \"../constants/userConstants\";\nimport { getPostsAction, getSavedPostsAction } from \"./postActions\";\nexport const getUserAction = id => async dispatch => {\n  try {\n    const {\n      error,\n      data\n    } = await api.getUser(id);\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_USER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_USER_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const updateUserAction = (id, formData) => async dispatch => {\n  try {\n    const {\n      error,\n      data\n    } = await api.updateUser(id, formData);\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_USER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_USER_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getPublicUsersAction = () => async dispatch => {\n  try {\n    const {\n      error,\n      data\n    } = await api.getPublicUsers();\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_PUBLIC_USERS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_PUBLIC_USERS_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getPublicUserAction = id => async dispatch => {\n  try {\n    const {\n      error,\n      data\n    } = await api.getPublicUser(id);\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_PUBLIC_USER_PROFILE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_PUBLIC_USER_PROFILE_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const followUserAction = id => async dispatch => {\n  try {\n    const {\n      error\n    } = await api.followUser(id);\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.CHANGE_FOLLOW_STATUS_SUCCESS,\n      payload: {\n        isFollowing: true\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: types.CHANGE_FOLLOW_STATUS_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const unfollowUserAction = id => async dispatch => {\n  try {\n    const {\n      error\n    } = await api.unfollowUser(id);\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.CHANGE_FOLLOW_STATUS_SUCCESS,\n      payload: {\n        isFollowing: false\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: types.CHANGE_FOLLOW_STATUS_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getFollowingUsersAction = () => async dispatch => {\n  try {\n    const {\n      error,\n      data\n    } = await api.getFollowingUsers();\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_FOLLOWING_USERS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_FOLLOWING_USERS_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const followUserAndFetchData = (toFollowId, currentUser) => async dispatch => {\n  try {\n    await dispatch(followUserAction(toFollowId));\n    await dispatch(getPublicUsersAction());\n    if (currentUser) {\n      await dispatch(getPostsAction());\n      await dispatch(getUserAction(currentUser._id));\n      await dispatch(getSavedPostsAction());\n    }\n  } catch (error) {\n    dispatch({\n      type: types.CHANGE_FOLLOW_STATUS_FAIL,\n      payload: \"Failed to follow user\"\n    });\n  }\n};","map":{"version":3,"names":["api","types","getPostsAction","getSavedPostsAction","getUserAction","id","dispatch","error","data","getUser","Error","type","GET_USER_SUCCESS","payload","GET_USER_FAIL","message","updateUserAction","formData","updateUser","getPublicUsersAction","getPublicUsers","GET_PUBLIC_USERS_SUCCESS","GET_PUBLIC_USERS_FAIL","getPublicUserAction","getPublicUser","GET_PUBLIC_USER_PROFILE_SUCCESS","GET_PUBLIC_USER_PROFILE_FAIL","followUserAction","followUser","CHANGE_FOLLOW_STATUS_SUCCESS","isFollowing","CHANGE_FOLLOW_STATUS_FAIL","unfollowUserAction","unfollowUser","getFollowingUsersAction","getFollowingUsers","GET_FOLLOWING_USERS_SUCCESS","GET_FOLLOWING_USERS_FAIL","followUserAndFetchData","toFollowId","currentUser","_id"],"sources":["E:/SEM 4/MERN/end_sem_project/SocialEcho-main/client/src/redux/actions/userActions.js"],"sourcesContent":["import * as api from \"../api/userAPI\";\nimport * as types from \"../constants/userConstants\";\nimport { getPostsAction, getSavedPostsAction } from \"./postActions\";\n\nexport const getUserAction = (id) => async (dispatch) => {\n  try {\n    const { error, data } = await api.getUser(id);\n\n    if (error) {\n      throw new Error(error);\n    }\n\n    dispatch({\n      type: types.GET_USER_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_USER_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const updateUserAction = (id, formData) => async (dispatch) => {\n  try {\n    const { error, data } = await api.updateUser(id, formData);\n\n    if (error) {\n      throw new Error(error);\n    }\n\n    dispatch({\n      type: types.GET_USER_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_USER_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const getPublicUsersAction = () => async (dispatch) => {\n  try {\n    const { error, data } = await api.getPublicUsers();\n\n    if (error) {\n      throw new Error(error);\n    }\n\n    dispatch({\n      type: types.GET_PUBLIC_USERS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_PUBLIC_USERS_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const getPublicUserAction = (id) => async (dispatch) => {\n  try {\n    const { error, data } = await api.getPublicUser(id);\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_PUBLIC_USER_PROFILE_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_PUBLIC_USER_PROFILE_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const followUserAction = (id) => async (dispatch) => {\n  try {\n    const { error } = await api.followUser(id);\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.CHANGE_FOLLOW_STATUS_SUCCESS,\n      payload: { isFollowing: true },\n    });\n  } catch (error) {\n    dispatch({\n      type: types.CHANGE_FOLLOW_STATUS_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const unfollowUserAction = (id) => async (dispatch) => {\n  try {\n    const { error } = await api.unfollowUser(id);\n    if (error) {\n      throw new Error(error);\n    }\n\n    dispatch({\n      type: types.CHANGE_FOLLOW_STATUS_SUCCESS,\n      payload: { isFollowing: false },\n    });\n  } catch (error) {\n    dispatch({\n      type: types.CHANGE_FOLLOW_STATUS_FAIL,\n      payload: error.message,\n    });\n  }\n};\nexport const getFollowingUsersAction = () => async (dispatch) => {\n  try {\n    const { error, data } = await api.getFollowingUsers();\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_FOLLOWING_USERS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_FOLLOWING_USERS_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\n\nexport const followUserAndFetchData =\n  (toFollowId, currentUser) => async (dispatch) => {\n    try {\n      await dispatch(followUserAction(toFollowId));\n      await dispatch(getPublicUsersAction());\n      if (currentUser) {\n        await dispatch(getPostsAction());\n        await dispatch(getUserAction(currentUser._id));\n        await dispatch(getSavedPostsAction());\n      }\n    } catch (error) {\n      dispatch({\n        type: types.CHANGE_FOLLOW_STATUS_FAIL,\n        payload: \"Failed to follow user\",\n      });\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}