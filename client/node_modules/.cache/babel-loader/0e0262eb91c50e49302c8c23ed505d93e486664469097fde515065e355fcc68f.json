{"ast":null,"code":"/**\n * Check if a token is valid based on its expiration time.\n * @param {string} token - The token to check.\n * @returns {boolean} True if the token is valid, false otherwise.\n */var isValidToken=function isValidToken(token){if(!token){return false;}var payload=token.split(\".\")[1];if(!payload){return false;}var decodedPayload=JSON.parse(window.atob(payload));var expiryTime=decodedPayload.exp*1000;var currentTime=Date.now();return expiryTime>currentTime;};export{isValidToken};","map":{"version":3,"names":["isValidToken","token","payload","split","decodedPayload","JSON","parse","window","atob","expiryTime","exp","currentTime","Date","now"],"sources":["E:/SEM 4/MERN/end_sem_project/SocialEcho-main/client/src/utils/authUtils.js"],"sourcesContent":["/**\n * Check if a token is valid based on its expiration time.\n * @param {string} token - The token to check.\n * @returns {boolean} True if the token is valid, false otherwise.\n */\nconst isValidToken = (token) => {\n  if (!token) {\n    return false;\n  }\n\n  const payload = token.split(\".\")[1];\n  if (!payload) {\n    return false;\n  }\n\n  const decodedPayload = JSON.parse(window.atob(payload));\n\n  const expiryTime = decodedPayload.exp * 1000;\n  const currentTime = Date.now();\n  return expiryTime > currentTime;\n};\n\nexport { isValidToken };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,GACA,GAAM,CAAAA,YAAY,CAAG,QAAf,CAAAA,YAAYA,CAAIC,KAAK,CAAK,CAC9B,GAAI,CAACA,KAAK,CAAE,CACV,MAAO,MAAK,CACd,CAEA,GAAM,CAAAC,OAAO,CAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACnC,GAAI,CAACD,OAAO,CAAE,CACZ,MAAO,MAAK,CACd,CAEA,GAAM,CAAAE,cAAc,CAAGC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,IAAI,CAACN,OAAO,CAAC,CAAC,CAEvD,GAAM,CAAAO,UAAU,CAAGL,cAAc,CAACM,GAAG,CAAG,IAAI,CAC5C,GAAM,CAAAC,WAAW,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAC9B,MAAO,CAAAJ,UAAU,CAAGE,WAAW,CACjC,CAAC,CAED,OAASX,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}