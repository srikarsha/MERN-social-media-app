{"ast":null,"code":"import * as types from \"../constants/postConstants\";\nimport { LOGOUT } from \"../constants/authConstants\";\nconst initialState = {\n  post: null,\n  posts: [],\n  publicPosts: [],\n  ownPost: null,\n  savedPosts: [],\n  totalPosts: 0,\n  communityPosts: [],\n  followingUsersPosts: [],\n  totalCommunityPosts: 0,\n  postError: null,\n  postCategory: null,\n  confirmationToken: null,\n  isPostInappropriate: false,\n  isCommentInappropriate: false\n};\nconst postsReducer = (state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n  switch (type) {\n    case LOGOUT:\n      return {\n        ...state,\n        post: null,\n        posts: [],\n        publicPosts: [],\n        ownPost: null,\n        savedPosts: [],\n        totalPosts: 0,\n        communityPosts: [],\n        followingUsersPosts: [],\n        totalCommunityPosts: 0,\n        postError: null,\n        commentError: null,\n        postCategory: null,\n        confirmationToken: null,\n        isPostInappropriate: false,\n        isCommentInappropriate: false\n      };\n    case types.CREATE_POST_SUCCESS:\n    case types.CONFIRM_POST_SUCCESS:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        communityPosts: [payload, ...state.communityPosts],\n        postError: null,\n        postCategory: null,\n        confirmationToken: null,\n        isPostInappropriate: false\n      };\n    case types.CREATE_POST_FAIL:\n    case types.CONFIRM_POST_FAIL:\n      return {\n        ...state,\n        postError: payload\n      };\n    case types.CREATE_POST_FAIL_INAPPROPRIATE:\n      return {\n        ...state,\n        isPostInappropriate: true\n      };\n    case types.CREATE_POST_FAIL_DETECT_CATEGORY:\n      return {\n        ...state,\n        confirmationToken: payload\n      };\n    case types.CREATE_POST_FAIL_CATEGORY_MISMATCH:\n      return {\n        ...state,\n        postCategory: payload\n      };\n    case types.CLEAR_CREATE_POST_FAIL:\n      return {\n        ...state,\n        postError: null,\n        postCategory: null,\n        confirmationToken: null,\n        isPostInappropriate: false\n      };\n    case types.GET_POST_SUCCESS:\n      return {\n        ...state,\n        post: payload,\n        postError: null\n      };\n    case types.GET_POST_FAIL:\n      return {\n        ...state,\n        postError: payload\n      };\n    case types.GET_OWN_POST_SUCCESS:\n      return {\n        ...state,\n        ownPost: payload,\n        postError: null\n      };\n    case types.GET_OWN_POST_FAIL:\n      return {\n        ...state,\n        postError: payload\n      };\n    case types.CLEAR_POST:\n      return {\n        ...state,\n        post: null,\n        comments: []\n      };\n    case types.CLEAR_POSTS:\n      return {\n        ...state,\n        posts: [],\n        totalPosts: 0\n      };\n    case types.CLEAR_COMMUNITY_POSTS:\n      return {\n        ...state,\n        communityPosts: [],\n        totalCommunityPosts: 0\n      };\n    case types.GET_POSTS_SUCCESS:\n      if (payload.page === 1) {\n        return {\n          ...state,\n          posts: payload ? payload.posts : [],\n          totalPosts: payload ? payload.totalPosts : 0,\n          postError: null\n        };\n      } else {\n        const existingPosts = state.posts.map(post => post._id);\n        const newPosts = (payload ? payload.posts : []).filter(post => !existingPosts.includes(post._id));\n        return {\n          ...state,\n          posts: [...state.posts, ...newPosts],\n          totalPosts: payload ? payload.totalPosts : 0,\n          postError: null\n        };\n      }\n    case types.GET_POSTS_FAIL:\n      return {\n        ...state,\n        postError: payload\n      };\n    case types.GET_COMMUNITY_POSTS_SUCCESS:\n      if (payload.page === 1) {\n        return {\n          ...state,\n          communityPosts: payload ? payload.posts : [],\n          totalCommunityPosts: payload ? payload.totalCommunityPosts : 0,\n          postError: null\n        };\n      } else {\n        return {\n          ...state,\n          communityPosts: [...state.communityPosts, ...(payload ? payload.posts : [])],\n          totalCommunityPosts: payload ? payload.totalCommunityPosts : 0,\n          postError: null\n        };\n      }\n    case types.GET_COMMUNITY_POSTS_FAIL:\n      return {\n        ...state,\n        postError: payload\n      };\n    case types.GET_FOLLOWING_USERS_POSTS_SUCCESS:\n      return {\n        ...state,\n        followingUsersPosts: payload ? payload : [],\n        postError: null\n      };\n    case types.GET_FOLLOWING_USERS_POSTS_FAIL:\n      return {\n        ...state,\n        postError: payload\n      };\n    case types.DELETE_POST_SUCCESS:\n      return {\n        ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        communityPosts: state.communityPosts.filter(post => post._id !== payload),\n        postError: null,\n        totalPosts: state.totalPosts - 1,\n        totalCommunityPosts: state.totalCommunityPosts - 1\n      };\n    case types.DELETE_POST_FAIL:\n      return {\n        ...state,\n        postError: payload\n      };\n    case types.UPDATE_POST_SUCCESS:\n      return {\n        ...state,\n        posts: state.posts.map(post => post._id === payload._id ? payload : post),\n        communityPosts: state.communityPosts.map(post => post._id === payload._id ? payload : post),\n        postError: null\n      };\n    case types.UPDATE_POST_FAIL:\n      return {\n        ...state,\n        postError: payload\n      };\n    case types.ADD_COMMENT_FAIL:\n      return {\n        ...state,\n        commentError: payload\n      };\n    case types.ADD_COMMENT_FAIL_INAPPROPRIATE:\n      return {\n        ...state,\n        isCommentInappropriate: true\n      };\n    case types.CLEAR_COMMENT_FAIL:\n      return {\n        ...state,\n        commentError: null,\n        isCommentInappropriate: false\n      };\n    case types.LIKE_POST_SUCCESS:\n    case types.UNLIKE_POST_SUCCESS:\n      const {\n        posts,\n        communityPosts\n      } = updatePostLike(state, payload);\n      return {\n        ...state,\n        posts,\n        communityPosts,\n        postError: null\n      };\n    case types.LIKE_POST_FAIL:\n    case types.UNLIKE_POST_FAIL:\n      return {\n        ...state,\n        postError: payload\n      };\n    case types.SAVE_POST_SUCCESS:\n    case types.UNSAVE_POST_SUCCESS:\n    case types.GET_SAVED_POSTS_SUCCESS:\n      return {\n        ...state,\n        savedPosts: payload ? payload : [],\n        postError: null\n      };\n    case types.SAVE_POST_FAIL:\n    case types.UNSAVE_POST_FAIL:\n    case types.GET_SAVED_POSTS_FAIL:\n      return {\n        ...state,\n        postError: payload\n      };\n    case types.GET_PUBLIC_POSTS_SUCCESS:\n      return {\n        ...state,\n        publicPosts: payload ? payload : [],\n        postError: null\n      };\n    case types.GET_PUBLIC_POSTS_FAIL:\n      return {\n        ...state,\n        postError: payload\n      };\n    case types.INCREASE_SAVED_BY_COUNT:\n      return {\n        ...state,\n        post: state.post && state.post._id === payload ? {\n          ...state.post,\n          savedByCount: state.post.savedByCount + 1\n        } : state.post,\n        postError: null\n      };\n    case types.DECREASE_SAVED_BY_COUNT:\n      return {\n        ...state,\n        post: state.post && state.post._id === payload ? {\n          ...state.post,\n          savedByCount: state.post.savedByCount - 1\n        } : state.post,\n        postError: null\n      };\n    default:\n      return state;\n  }\n};\nconst updatePostLike = (state, updatedPost) => {\n  const posts = state.posts.map(post => post._id === updatedPost._id ? updatedPost : post);\n  const communityPosts = state.communityPosts.map(post => post._id === updatedPost._id ? updatedPost : post);\n  return {\n    posts,\n    communityPosts\n  };\n};\nexport default postsReducer;","map":{"version":3,"names":["types","LOGOUT","initialState","post","posts","publicPosts","ownPost","savedPosts","totalPosts","communityPosts","followingUsersPosts","totalCommunityPosts","postError","postCategory","confirmationToken","isPostInappropriate","isCommentInappropriate","postsReducer","state","action","type","payload","commentError","CREATE_POST_SUCCESS","CONFIRM_POST_SUCCESS","CREATE_POST_FAIL","CONFIRM_POST_FAIL","CREATE_POST_FAIL_INAPPROPRIATE","CREATE_POST_FAIL_DETECT_CATEGORY","CREATE_POST_FAIL_CATEGORY_MISMATCH","CLEAR_CREATE_POST_FAIL","GET_POST_SUCCESS","GET_POST_FAIL","GET_OWN_POST_SUCCESS","GET_OWN_POST_FAIL","CLEAR_POST","comments","CLEAR_POSTS","CLEAR_COMMUNITY_POSTS","GET_POSTS_SUCCESS","page","existingPosts","map","_id","newPosts","filter","includes","GET_POSTS_FAIL","GET_COMMUNITY_POSTS_SUCCESS","GET_COMMUNITY_POSTS_FAIL","GET_FOLLOWING_USERS_POSTS_SUCCESS","GET_FOLLOWING_USERS_POSTS_FAIL","DELETE_POST_SUCCESS","DELETE_POST_FAIL","UPDATE_POST_SUCCESS","UPDATE_POST_FAIL","ADD_COMMENT_FAIL","ADD_COMMENT_FAIL_INAPPROPRIATE","CLEAR_COMMENT_FAIL","LIKE_POST_SUCCESS","UNLIKE_POST_SUCCESS","updatePostLike","LIKE_POST_FAIL","UNLIKE_POST_FAIL","SAVE_POST_SUCCESS","UNSAVE_POST_SUCCESS","GET_SAVED_POSTS_SUCCESS","SAVE_POST_FAIL","UNSAVE_POST_FAIL","GET_SAVED_POSTS_FAIL","GET_PUBLIC_POSTS_SUCCESS","GET_PUBLIC_POSTS_FAIL","INCREASE_SAVED_BY_COUNT","savedByCount","DECREASE_SAVED_BY_COUNT","updatedPost"],"sources":["E:/SEM 4/MERN/end_sem_project/SocialEcho-main/client/src/redux/reducers/posts.js"],"sourcesContent":["import * as types from \"../constants/postConstants\";\nimport { LOGOUT } from \"../constants/authConstants\";\n\nconst initialState = {\n  post: null,\n  posts: [],\n  publicPosts: [],\n  ownPost: null,\n  savedPosts: [],\n  totalPosts: 0,\n  communityPosts: [],\n  followingUsersPosts: [],\n  totalCommunityPosts: 0,\n  postError: null,\n  postCategory: null,\n  confirmationToken: null,\n  isPostInappropriate: false,\n  isCommentInappropriate: false,\n};\n\nconst postsReducer = (state = initialState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case LOGOUT:\n      return {\n        ...state,\n        post: null,\n        posts: [],\n        publicPosts: [],\n        ownPost: null,\n        savedPosts: [],\n        totalPosts: 0,\n        communityPosts: [],\n        followingUsersPosts: [],\n        totalCommunityPosts: 0,\n        postError: null,\n        commentError: null,\n        postCategory: null,\n        confirmationToken: null,\n        isPostInappropriate: false,\n        isCommentInappropriate: false,\n      };\n\n    case types.CREATE_POST_SUCCESS:\n    case types.CONFIRM_POST_SUCCESS:\n      return {\n        ...state,\n        posts: [payload, ...state.posts],\n        communityPosts: [payload, ...state.communityPosts],\n        postError: null,\n        postCategory: null,\n        confirmationToken: null,\n        isPostInappropriate: false,\n      };\n\n    case types.CREATE_POST_FAIL:\n    case types.CONFIRM_POST_FAIL:\n      return {\n        ...state,\n        postError: payload,\n      };\n\n    case types.CREATE_POST_FAIL_INAPPROPRIATE:\n      return {\n        ...state,\n        isPostInappropriate: true,\n      };\n\n    case types.CREATE_POST_FAIL_DETECT_CATEGORY:\n      return {\n        ...state,\n        confirmationToken: payload,\n      };\n\n    case types.CREATE_POST_FAIL_CATEGORY_MISMATCH:\n      return {\n        ...state,\n        postCategory: payload,\n      };\n\n    case types.CLEAR_CREATE_POST_FAIL:\n      return {\n        ...state,\n        postError: null,\n        postCategory: null,\n        confirmationToken: null,\n        isPostInappropriate: false,\n      };\n\n    case types.GET_POST_SUCCESS:\n      return {\n        ...state,\n        post: payload,\n        postError: null,\n      };\n    case types.GET_POST_FAIL:\n      return {\n        ...state,\n        postError: payload,\n      };\n\n    case types.GET_OWN_POST_SUCCESS:\n      return {\n        ...state,\n        ownPost: payload,\n        postError: null,\n      };\n    case types.GET_OWN_POST_FAIL:\n      return {\n        ...state,\n        postError: payload,\n      };\n\n    case types.CLEAR_POST:\n      return {\n        ...state,\n        post: null,\n        comments: [],\n      };\n\n    case types.CLEAR_POSTS:\n      return {\n        ...state,\n        posts: [],\n        totalPosts: 0,\n      };\n\n    case types.CLEAR_COMMUNITY_POSTS:\n      return {\n        ...state,\n        communityPosts: [],\n        totalCommunityPosts: 0,\n      };\n\n    case types.GET_POSTS_SUCCESS:\n      if (payload.page === 1) {\n        return {\n          ...state,\n          posts: payload ? payload.posts : [],\n          totalPosts: payload ? payload.totalPosts : 0,\n          postError: null,\n        };\n      } else {\n        const existingPosts = state.posts.map((post) => post._id);\n        const newPosts = (payload ? payload.posts : []).filter(\n          (post) => !existingPosts.includes(post._id)\n        );\n        return {\n          ...state,\n          posts: [...state.posts, ...newPosts],\n          totalPosts: payload ? payload.totalPosts : 0,\n          postError: null,\n        };\n      }\n\n    case types.GET_POSTS_FAIL:\n      return {\n        ...state,\n        postError: payload,\n      };\n\n    case types.GET_COMMUNITY_POSTS_SUCCESS:\n      if (payload.page === 1) {\n        return {\n          ...state,\n          communityPosts: payload ? payload.posts : [],\n          totalCommunityPosts: payload ? payload.totalCommunityPosts : 0,\n          postError: null,\n        };\n      } else {\n        return {\n          ...state,\n          communityPosts: [\n            ...state.communityPosts,\n            ...(payload ? payload.posts : []),\n          ],\n          totalCommunityPosts: payload ? payload.totalCommunityPosts : 0,\n          postError: null,\n        };\n      }\n\n    case types.GET_COMMUNITY_POSTS_FAIL:\n      return {\n        ...state,\n        postError: payload,\n      };\n\n    case types.GET_FOLLOWING_USERS_POSTS_SUCCESS:\n      return {\n        ...state,\n        followingUsersPosts: payload ? payload : [],\n        postError: null,\n      };\n\n    case types.GET_FOLLOWING_USERS_POSTS_FAIL:\n      return {\n        ...state,\n        postError: payload,\n      };\n\n    case types.DELETE_POST_SUCCESS:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== payload),\n        communityPosts: state.communityPosts.filter(\n          (post) => post._id !== payload\n        ),\n        postError: null,\n        totalPosts: state.totalPosts - 1,\n        totalCommunityPosts: state.totalCommunityPosts - 1,\n      };\n    case types.DELETE_POST_FAIL:\n      return {\n        ...state,\n        postError: payload,\n      };\n\n    case types.UPDATE_POST_SUCCESS:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === payload._id ? payload : post\n        ),\n        communityPosts: state.communityPosts.map((post) =>\n          post._id === payload._id ? payload : post\n        ),\n        postError: null,\n      };\n    case types.UPDATE_POST_FAIL:\n      return {\n        ...state,\n        postError: payload,\n      };\n\n    case types.ADD_COMMENT_FAIL:\n      return {\n        ...state,\n        commentError: payload,\n      };\n\n    case types.ADD_COMMENT_FAIL_INAPPROPRIATE:\n      return {\n        ...state,\n        isCommentInappropriate: true,\n      };\n\n    case types.CLEAR_COMMENT_FAIL:\n      return {\n        ...state,\n        commentError: null,\n        isCommentInappropriate: false,\n      };\n\n    case types.LIKE_POST_SUCCESS:\n    case types.UNLIKE_POST_SUCCESS:\n      const { posts, communityPosts } = updatePostLike(state, payload);\n      return {\n        ...state,\n        posts,\n        communityPosts,\n        postError: null,\n      };\n    case types.LIKE_POST_FAIL:\n    case types.UNLIKE_POST_FAIL:\n      return {\n        ...state,\n        postError: payload,\n      };\n\n    case types.SAVE_POST_SUCCESS:\n    case types.UNSAVE_POST_SUCCESS:\n    case types.GET_SAVED_POSTS_SUCCESS:\n      return {\n        ...state,\n        savedPosts: payload ? payload : [],\n        postError: null,\n      };\n    case types.SAVE_POST_FAIL:\n    case types.UNSAVE_POST_FAIL:\n    case types.GET_SAVED_POSTS_FAIL:\n      return {\n        ...state,\n        postError: payload,\n      };\n\n    case types.GET_PUBLIC_POSTS_SUCCESS:\n      return {\n        ...state,\n        publicPosts: payload ? payload : [],\n        postError: null,\n      };\n    case types.GET_PUBLIC_POSTS_FAIL:\n      return {\n        ...state,\n        postError: payload,\n      };\n    case types.INCREASE_SAVED_BY_COUNT:\n      return {\n        ...state,\n        post:\n          state.post && state.post._id === payload\n            ? {\n                ...state.post,\n                savedByCount: state.post.savedByCount + 1,\n              }\n            : state.post,\n\n        postError: null,\n      };\n    case types.DECREASE_SAVED_BY_COUNT:\n      return {\n        ...state,\n        post:\n          state.post && state.post._id === payload\n            ? {\n                ...state.post,\n                savedByCount: state.post.savedByCount - 1,\n              }\n            : state.post,\n\n        postError: null,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst updatePostLike = (state, updatedPost) => {\n  const posts = state.posts.map((post) =>\n    post._id === updatedPost._id ? updatedPost : post\n  );\n  const communityPosts = state.communityPosts.map((post) =>\n    post._id === updatedPost._id ? updatedPost : post\n  );\n  return { posts, communityPosts };\n};\n\nexport default postsReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}