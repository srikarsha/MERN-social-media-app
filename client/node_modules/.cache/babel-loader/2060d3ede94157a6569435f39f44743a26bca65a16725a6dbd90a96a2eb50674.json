{"ast":null,"code":"import * as api from \"../api/adminAPI\";\nimport * as types from \"../constants/adminConstants\";\nexport const signInAction = credential => async dispatch => {\n  try {\n    const {\n      error,\n      data\n    } = await api.signIn(credential);\n    if (error) {\n      throw new Error(error);\n    }\n    localStorage.setItem(\"admin\", JSON.stringify(data));\n    dispatch({\n      type: types.SIGN_IN_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: types.SIGN_IN_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const logoutAction = () => async dispatch => {\n  try {\n    localStorage.removeItem(\"admin\");\n    dispatch({\n      type: types.LOGOUT_SUCCESS\n    });\n  } catch (error) {}\n};\nexport const getLogsAction = () => async dispatch => {\n  try {\n    const {\n      error,\n      data\n    } = await api.getLogs();\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_LOGS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_LOGS_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const deleteLogsAction = () => async dispatch => {\n  try {\n    const {\n      error\n    } = await api.deleteLogs();\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.DELETE_LOGS_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: types.DELETE_LOGS_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getServicePreferencesAction = () => async dispatch => {\n  try {\n    const {\n      error,\n      data\n    } = await api.getServicePreferences();\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_SERVICE_PREFERENCES_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_SERVICE_PREFERENCES_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const updateServicePreferencesAction = preferences => async dispatch => {\n  try {\n    const {\n      error\n    } = await api.updateServicePreferences(preferences);\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.UPDATE_SERVICE_PREFERENCES_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: types.UPDATE_SERVICE_PREFERENCES_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getCommunitiesAction = () => async dispatch => {\n  try {\n    const {\n      error,\n      data\n    } = await api.getCommunities();\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_COMMUNITIES_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_COMMUNITIES_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getCommunityAction = communityId => async dispatch => {\n  try {\n    const {\n      error,\n      data\n    } = await api.getCommunity(communityId);\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_COMMUNITY_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_COMMUNITY_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const getModeratorsAction = () => async dispatch => {\n  try {\n    const {\n      error,\n      data\n    } = await api.getModerators();\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_MODERATORS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_MODERATORS_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const addModeratorAction = (communityId, moderatorId) => async dispatch => {\n  try {\n    const {\n      error\n    } = await api.addModerator(communityId, moderatorId);\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.ADD_MODERATOR_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: types.ADD_MODERATOR_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const removeModeratorAction = (communityId, moderatorId) => async dispatch => {\n  try {\n    const {\n      error\n    } = await api.removeModerator(communityId, moderatorId);\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.REMOVE_MODERATOR_SUCCESS\n    });\n  } catch (error) {\n    dispatch({\n      type: types.REMOVE_MODERATOR_FAIL,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"names":["api","types","signInAction","credential","dispatch","error","data","signIn","Error","localStorage","setItem","JSON","stringify","type","SIGN_IN_SUCCESS","SIGN_IN_FAIL","payload","message","logoutAction","removeItem","LOGOUT_SUCCESS","getLogsAction","getLogs","GET_LOGS_SUCCESS","GET_LOGS_FAIL","deleteLogsAction","deleteLogs","DELETE_LOGS_SUCCESS","DELETE_LOGS_FAIL","getServicePreferencesAction","getServicePreferences","GET_SERVICE_PREFERENCES_SUCCESS","GET_SERVICE_PREFERENCES_FAIL","updateServicePreferencesAction","preferences","updateServicePreferences","UPDATE_SERVICE_PREFERENCES_SUCCESS","UPDATE_SERVICE_PREFERENCES_FAIL","getCommunitiesAction","getCommunities","GET_COMMUNITIES_SUCCESS","GET_COMMUNITIES_FAIL","getCommunityAction","communityId","getCommunity","GET_COMMUNITY_SUCCESS","GET_COMMUNITY_FAIL","getModeratorsAction","getModerators","GET_MODERATORS_SUCCESS","GET_MODERATORS_FAIL","addModeratorAction","moderatorId","addModerator","ADD_MODERATOR_SUCCESS","ADD_MODERATOR_FAIL","removeModeratorAction","removeModerator","REMOVE_MODERATOR_SUCCESS","REMOVE_MODERATOR_FAIL"],"sources":["E:/SEM 4/MERN/end_sem_project/SocialEcho-main/client/src/redux/actions/adminActions.js"],"sourcesContent":["import * as api from \"../api/adminAPI\";\nimport * as types from \"../constants/adminConstants\";\n\nexport const signInAction = (credential) => async (dispatch) => {\n  try {\n    const { error, data } = await api.signIn(credential);\n    if (error) {\n      throw new Error(error);\n    }\n    localStorage.setItem(\"admin\", JSON.stringify(data));\n    dispatch({\n      type: types.SIGN_IN_SUCCESS,\n    });\n  } catch (error) {\n    dispatch({\n      type: types.SIGN_IN_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const logoutAction = () => async (dispatch) => {\n  try {\n    localStorage.removeItem(\"admin\");\n    dispatch({\n      type: types.LOGOUT_SUCCESS,\n    });\n  } catch (error) {}\n};\n\nexport const getLogsAction = () => async (dispatch) => {\n  try {\n    const { error, data } = await api.getLogs();\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_LOGS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_LOGS_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const deleteLogsAction = () => async (dispatch) => {\n  try {\n    const { error } = await api.deleteLogs();\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.DELETE_LOGS_SUCCESS,\n    });\n  } catch (error) {\n    dispatch({\n      type: types.DELETE_LOGS_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const getServicePreferencesAction = () => async (dispatch) => {\n  try {\n    const { error, data } = await api.getServicePreferences();\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_SERVICE_PREFERENCES_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_SERVICE_PREFERENCES_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const updateServicePreferencesAction =\n  (preferences) => async (dispatch) => {\n    try {\n      const { error } = await api.updateServicePreferences(preferences);\n      if (error) {\n        throw new Error(error);\n      }\n      dispatch({\n        type: types.UPDATE_SERVICE_PREFERENCES_SUCCESS,\n      });\n    } catch (error) {\n      dispatch({\n        type: types.UPDATE_SERVICE_PREFERENCES_FAIL,\n        payload: error.message,\n      });\n    }\n  };\n\nexport const getCommunitiesAction = () => async (dispatch) => {\n  try {\n    const { error, data } = await api.getCommunities();\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_COMMUNITIES_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_COMMUNITIES_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const getCommunityAction = (communityId) => async (dispatch) => {\n  try {\n    const { error, data } = await api.getCommunity(communityId);\n    if (error) {\n      throw new Error(error);\n    }\n\n    dispatch({\n      type: types.GET_COMMUNITY_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_COMMUNITY_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const getModeratorsAction = () => async (dispatch) => {\n  try {\n    const { error, data } = await api.getModerators();\n    if (error) {\n      throw new Error(error);\n    }\n    dispatch({\n      type: types.GET_MODERATORS_SUCCESS,\n      payload: data,\n    });\n  } catch (error) {\n    dispatch({\n      type: types.GET_MODERATORS_FAIL,\n      payload: error.message,\n    });\n  }\n};\n\nexport const addModeratorAction =\n  (communityId, moderatorId) => async (dispatch) => {\n    try {\n      const { error } = await api.addModerator(communityId, moderatorId);\n      if (error) {\n        throw new Error(error);\n      }\n      dispatch({\n        type: types.ADD_MODERATOR_SUCCESS,\n      });\n    } catch (error) {\n      dispatch({\n        type: types.ADD_MODERATOR_FAIL,\n        payload: error.message,\n      });\n    }\n  };\n\nexport const removeModeratorAction =\n  (communityId, moderatorId) => async (dispatch) => {\n    try {\n      const { error } = await api.removeModerator(communityId, moderatorId);\n      if (error) {\n        throw new Error(error);\n      }\n      dispatch({\n        type: types.REMOVE_MODERATOR_SUCCESS,\n      });\n    } catch (error) {\n      dispatch({\n        type: types.REMOVE_MODERATOR_FAIL,\n        payload: error.message,\n      });\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}