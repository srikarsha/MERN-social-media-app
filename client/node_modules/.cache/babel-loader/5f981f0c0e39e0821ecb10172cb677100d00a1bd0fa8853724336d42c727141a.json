{"ast":null,"code":"/**\n * Check if a token is valid based on its expiration time.\n * @param {string} token - The token to check.\n * @returns {boolean} True if the token is valid, false otherwise.\n */\nconst isValidToken = token => {\n  if (!token) {\n    return false;\n  }\n  const payload = token.split(\".\")[1];\n  if (!payload) {\n    return false;\n  }\n  const decodedPayload = JSON.parse(window.atob(payload));\n  const expiryTime = decodedPayload.exp * 1000;\n  const currentTime = Date.now();\n  return expiryTime > currentTime;\n};\nexport { isValidToken };","map":{"version":3,"names":["isValidToken","token","payload","split","decodedPayload","JSON","parse","window","atob","expiryTime","exp","currentTime","Date","now"],"sources":["E:/SEM 4/MERN/end_sem_project/SocialEcho-main/client/src/utils/authUtils.js"],"sourcesContent":["/**\n * Check if a token is valid based on its expiration time.\n * @param {string} token - The token to check.\n * @returns {boolean} True if the token is valid, false otherwise.\n */\nconst isValidToken = (token) => {\n  if (!token) {\n    return false;\n  }\n\n  const payload = token.split(\".\")[1];\n  if (!payload) {\n    return false;\n  }\n\n  const decodedPayload = JSON.parse(window.atob(payload));\n\n  const expiryTime = decodedPayload.exp * 1000;\n  const currentTime = Date.now();\n  return expiryTime > currentTime;\n};\n\nexport { isValidToken };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,YAAY,GAAIC,KAAK,IAAK;EAC9B,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,KAAK;EACd;EAEA,MAAMC,OAAO,GAAGD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EACnC,IAAI,CAACD,OAAO,EAAE;IACZ,OAAO,KAAK;EACd;EAEA,MAAME,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACC,IAAI,CAACN,OAAO,CAAC,CAAC;EAEvD,MAAMO,UAAU,GAAGL,cAAc,CAACM,GAAG,GAAG,IAAI;EAC5C,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;EAC9B,OAAOJ,UAAU,GAAGE,WAAW;AACjC,CAAC;AAED,SAASX,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}